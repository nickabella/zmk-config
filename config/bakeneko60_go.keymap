/*
 * Copyright (c) 2023 Andrew Kannan
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        prev_tab: prev_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_COMMAND &kp LEFT_ALT>,
                <&macro_tap>,
                <&kp LEFT_ARROW>,
                <&macro_release>,
                <&kp LEFT_COMMAND &kp LEFT_ALT>;

            label = "PREV_TAB";
        };

        next_tab: next_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_COMMAND &kp LEFT_ALT>,
                <&macro_tap>,
                <&kp RIGHT_ARROW>,
                <&macro_release>,
                <&kp LEFT_COMMAND &kp LEFT_ALT>;

            label = "NEXT_TAB";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------
            // | ESC |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |  -  |  =  | BKSP|BKSP|
            // | TAB  |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |   "|"   |
            // | CAPS  |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  ;  |  '  |     ENTER    |
            // |  SHIFT  |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  .  |  /  |  SHIFT  | MO(1)  |
            // |  CTL  |  WIN  |  ALT  |            SPACE              |  ALT  |  WIN  |  MO(1) |  CTL  |
            // ------------------------------------------------------------------------------------------

            bindings = <
&gresc     &kp N1    &kp N2  &kp N3    &kp N4  &kp N5  &kp N6     &kp N7  &kp N8  &kp N9     &kp N0    &kp MINUS  &kp EQUAL  &kp BSPC  &kp BSPC
&kp TAB    &kp Q     &kp W   &kp E     &kp R   &kp T   &kp Y      &kp U   &kp I   &kp O      &kp P     &kp LBKT   &kp RBKT             &kp BSLH
&kp CLCK   &kp A     &kp S   &kp D     &kp F   &kp G   &kp H      &kp J   &kp K   &kp L      &kp SEMI  &kp SQT                         &kp RET
&kp LSHFT            &kp Z   &kp X     &kp C   &kp V   &kp B      &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH   &kp RSHFT            &trans
&kp LCTRL  &kp LGUI          &kp LALT                  &kp SPACE                             &mo 1     &prev_tab  &next_tab            &kp RCTRL
            >;
        };

        fn1 {
            // ------------------------------------------------------------------------------------------------
            // |    `   | F1  | F2  | F3  | F4  | F5  | F6  | F7  | F8  | F9  | F10  | F11 | F12 |     | DEL  |
            // | EFCT REV|   |  UP |   | HUEUP | SATUP | BRIUP | SPDUP |      |  PGUP |    |     |    |       |
            // | EFCT FWD | LT |  DN  | RT | HUEDN | SATDN | BRIDN | SPDDN | HOME | PGDN | END  |  | BOOTLDR  |
            // |             |     |      |      |     |     |     |     |     |     |     |         |        |
            // |         |      |      |             TOG RGB                | PRT SCR |       |       |  MO(2)|
            // ------------------------------------------------------------------------------------------------

            bindings = <
&kp TILDE  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6            &kp F7          &kp F8        &kp F9     &kp F10    &kp F11       &kp F12        &trans  &kp DEL
&trans     &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans        &trans     &trans     &trans        &trans                 &trans
&trans     &trans  &trans  &trans  &trans  &trans  &kp LEFT          &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &trans     &trans                               &bootloader
&trans             &trans  &trans  &trans  &trans  &trans            &kp C_PREVIOUS  &kp C_NEXT    &trans     &kp COMMA  &kp C_VOL_DN  &kp C_VOL_UP           &trans
&trans     &trans          &trans                  &kp C_PLAY_PAUSE                                           &trans     &kp PAGE_UP   &kp PAGE_DOWN          &mo 2
            >;
        };

        bt1 {
            // ------------------------------------------------------------------------------------------------
            // | BT CLR |     |     |     |     |     |     |     |     |     |     |    |    |       |       |
            // |  BT 1   |   |     |   |       |       |       |       |   |     |    |     |     |           |
            // |   BT 2   |    |      |    |       |       |       |       |      |      |      |  |   Reset  |
            // |    BT 3     |     |      |      |     |     |     |     |     |     |     |         |        |
            // |   BT 4  |      |      |                                    |         |       |       |       |
            // ------------------------------------------------------------------------------------------------

            bindings = <
&bt BT_CLR    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 0  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans
&bt BT_SEL 1  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                  &sys_reset
&bt BT_SEL 2          &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans
&bt BT_SEL 3  &trans          &trans                  &trans                          &trans  &trans  &trans          &trans
            >;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_bt {
            timeout-ms = <50>;
            key-positions = <61 62>;
            bindings = <&mo 2>;
        };
    };
};
